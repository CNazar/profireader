#from sqlalchemy.orm import relationship, backref
from sqlalchemy import Column, ForeignKey, CheckConstraint
from sqlalchemy.orm import relationship
# from db_init import Base, g.db
from ..models.rights import Right
from ..constants.TABLE_TYPES import TABLE_TYPES
from sqlalchemy import Enum
from flask.ext.login import UserMixin, AnonymousUserMixin
from .pr_base import PRBase, Base
from ..constants.STATUS import STATUS_NAME
from .rights import get_my_attributes


class UserStatusInCompanyRights:
    _status_name = None
    _rights = (0, 0)

    def __init__(self, status, rights_defined=[], rights_undefined=[]):
        self.status_name = STATUS_NAME[status]
        self.rights = (rights_defined, rights_undefined)

    @property
    def status_name(self):
        return self._status_name

    @status_name.setter
    def status_name(self, stat_name):
        self._status_name = stat_name

    @property
    def rights(self):
        return self._rights

    @rights.setter
    def rights(self, rights_def_undef=([], [])):
        # Some explanation is needed.
        # if rights_defined is 1 on some bit then this right (permission) is available.
        # if 0 then we should check the value of rights_undefined column
        # if it is really 0 then right (permission) is not available.
        # if it is 1 then this right (permission) should be taken from user_company table.
        # such construction of rights defines the CheckConstraint presented below.
        rights_defined = rights_def_undef[0]
        rights_undefined = rights_def_undef[1]
        if set(rights_defined) & set(rights_undefined):
            raise Exception
        rights_defined_int = Right.transform_rights_into_integer(rights_defined)
        rights_undefined_int = Right.transform_rights_into_integer(rights_undefined)
        self._rights = (rights_defined_int, rights_undefined_int)


status_rights = dict()

status = 'active'
rights_defined = [Right['upload_files'], Right['send_publications']]
rights_undefined = [Right['edit'], Right['publish'], Right['unpublish'], Right['delete_files'],
                    Right['add_employee'], Right['suspend_employee'],
                    Right['manage_access_company'], Right['manage_access_portal'],
                    Right['article_priority'], Right['manage_readers'],
                    Right['manage_companies_partners'], Right['manage_comments'],
                    Right['subscribe_to_portals']]
stat_r = UserStatusInCompanyRights(status,
                                   rights_defined=rights_defined,
                                   rights_undefined=rights_undefined)
status_rights[stat_r.status_name] = stat_r

stat_r = UserStatusInCompanyRights('nonactive')
status_rights[stat_r.status_name] = stat_r

stat_r = UserStatusInCompanyRights('blocked')
status_rights[stat_r.status_name] = stat_r

stat_r = UserStatusInCompanyRights('deleted')
status_rights[stat_r.status_name] = stat_r

stat_r = UserStatusInCompanyRights('banned')
status_rights[stat_r.status_name] = stat_r

stat_r = UserStatusInCompanyRights('rejected')
status_rights[stat_r.status_name] = stat_r

stat_r = UserStatusInCompanyRights('suspended')
status_rights[stat_r.status_name] = stat_r
