#from sqlalchemy.orm import relationship, backref
from sqlalchemy import Column, ForeignKey, CheckConstraint
from sqlalchemy.orm import relationship
# from db_init import Base, g.db
from ..models.rights import Right
from ..constants.TABLE_TYPES import TABLE_TYPES
from sqlalchemy import Enum
from flask.ext.login import UserMixin, AnonymousUserMixin
from .pr_base import PRBase, Base
from ..constants.STATUS import STATUS_NAME


class UserStatusInCompanyRights(Base, UserMixin, PRBase):
    __tablename__ = 'user_status_in_company_rights'

    name = Column(Enum(*list(STATUS_NAME.keys()), name='status_name_type'), primary_key=True)
    rights_defined = Column(TABLE_TYPES['bigint'],
                            CheckConstraint('rights_defined >= 0',
                                            name='unsigned_rights_def'))
    rights_undefined = Column(TABLE_TYPES['bigint'],
                              CheckConstraint('rights_undefined >= 0',
                                              name='unsigned_rights_undef'))
    # Some explanation is needed.
    # if rights_defined is 1 on some bit then this right (permission) is available.
    # if 0 then we should check the value of rights_undefined column
    # if it is really 0 then right (permission) is not available.
    # if it is 1 then this right (permission) should be taken from user_company table.
    # such construction of rights defines the CheckConstraint presented below.
    CheckConstraint('rights_defined & rights_undefined = 0', name='right_dependency')


status_rights = dict()


def check(rts_def, rts_undef):
    rez = True
    if not (set(rts_def) & set(rts_undef)):
        raise Exception
    return rez

# Right['edit']
# Right['publish']
# Right['unpublish']
# Right['upload_files']
# Right['delete_files']
# Right['add_employee']
# Right['suspend_employee']
# Right['send_publications']
# Right['manage_access_company']
# Right['manage_access_portal']
# Right['article_priority']
# Right['manage_readers']
# Right['manage_companies_partners']
# Right['manage_comments']
# Right['subscribe_to_portals']

status = 'active'
status_name = STATUS_NAME[status]
stat_r = UserStatusInCompanyRights()
stat_r.name = status_name
rights_defined = [Right['upload_files'], Right['send_publications']]
rights_undefined = [Right['edit'], Right['publish'], Right['unpublish'], Right['delete_files'],
                    Right['add_employee'], Right['suspend_employee'],
                    Right['manage_access_company'], Right['manage_access_portal'],
                    Right['article_priority'], Right['manage_readers'],
                    Right['manage_companies_partners'], Right['manage_comments'],
                    Right['subscribe_to_portals']]
check(rights_defined, rights_undefined)
stat_r.rights_defined = \
    Right.transform_rights_into_integer(rights_defined)
stat_r.rights_undefined = \
    Right.transform_rights_into_integer(rights_undefined)
status_rights[status_name] = stat_r

status = 'nonactive'
status_name = STATUS_NAME[status]
stat_r = UserStatusInCompanyRights()
stat_r.name = status_name
rights_defined = ['']
rights_undefined = ['']
check(rights_defined, rights_undefined)
stat_r.rights_defined = \
    Right.transform_rights_into_integer(rights_defined)
stat_r.rights_undefined = \
    Right.transform_rights_into_integer(rights_undefined)
status_rights[status_name] = stat_r

status = 'blocked'
status_name = STATUS_NAME[status]
stat_r = UserStatusInCompanyRights()
stat_r.name = status_name
rights_defined = ['']
rights_undefined = ['']
check(rights_defined, rights_undefined)
stat_r.rights_defined = \
    Right.transform_rights_into_integer(rights_defined)
stat_r.rights_undefined = \
    Right.transform_rights_into_integer(rights_undefined)
status_rights[status_name] = stat_r

status = 'deleted'
status_name = STATUS_NAME[status]
stat_r = UserStatusInCompanyRights()
stat_r.name = status_name
rights_defined = ['']
rights_undefined = ['']
check(rights_defined, rights_undefined)
stat_r.rights_defined = \
    Right.transform_rights_into_integer(rights_defined)
stat_r.rights_undefined = \
    Right.transform_rights_into_integer(rights_undefined)
status_rights[status_name] = stat_r

status = 'banned'
status_name = STATUS_NAME[status]
stat_r = UserStatusInCompanyRights()
stat_r.name = status_name
rights_defined = ['']
rights_undefined = ['']
check(rights_defined, rights_undefined)
stat_r.rights_defined = \
    Right.transform_rights_into_integer(rights_defined)
stat_r.rights_undefined = \
    Right.transform_rights_into_integer(rights_undefined)
status_rights[status_name] = stat_r

status = 'rejected'
status_name = STATUS_NAME[status]
stat_r = UserStatusInCompanyRights()
stat_r.name = status_name
rights_defined = ['']
rights_undefined = ['']
check(rights_defined, rights_undefined)
stat_r.rights_defined = \
    Right.transform_rights_into_integer(rights_defined)
stat_r.rights_undefined = \
    Right.transform_rights_into_integer(rights_undefined)
status_rights[status_name] = stat_r

status = 'suspended'
status_name = STATUS_NAME[status]
stat_r = UserStatusInCompanyRights()
stat_r.name = status_name
rights_defined = ['']
rights_undefined = ['']
check(rights_defined, rights_undefined)
stat_r.rights_defined = \
    Right.transform_rights_into_integer(rights_defined)
stat_r.rights_undefined = \
    Right.transform_rights_into_integer(rights_undefined)
status_rights[status_name] = stat_r
